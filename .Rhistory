install.packages("tidyr")
install.packages("sandwich")
install.packages("lmtest")
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
class_diag <- function(probs,truth){
#CONFUSION MATRIX: CALCULATE ACCURACY, TPR, TNR, PPV
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
headache4 <- headache %>% mutate(headache_occur=ifelse(headache=="yes",1,0)) %>%
select(headache_occur, time, medication)
headache$medication <- factor(medication, ordered = FALSE )
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
class_diag <- function(probs,truth){
#CONFUSION MATRIX: CALCULATE ACCURACY, TPR, TNR, PPV
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
headache <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/carData/KosteckiDillon.csv")
headache <- headache %>% select(-X)
head(headache)
ggplot(headache, aes(x = age, y = airq)) +
geom_point(alpha=.5) + geom_density_2d(h=2) +
coord_fixed() + facet_wrap(~hatype)
covariance <- headache %>% group_by(hatype) %>% do(covs=cov(.[5:6]))
for(i in 1:3){print(as.character(covariance$hatype[i]))
print(covariance$covs[i])}
man <- manova(cbind(age, airq) ~ hatype, data=headache)
summary(man)
summary.aov(man)
headache %>% group_by(hatype) %>% summarize(mean(age), mean(airq))
pairwise.t.test(headache$airq, headache$hatype, p.adj="none")
pairwise.t.test(headache$age, headache$hatype, p.adj="none")
#P(type l error):
1-((.95)^9)
#Bonferroni corrected alpha:
.05/9
real <- (mean(headache[headache$headache=="yes",]$airq) -
mean(headache[headache$headache=="no",]$airq))
real
random <- vector()
for(i in 1:5000){
mixed <- data.frame(airq=sample(headache$airq), presence=headache$headache)
random[i] <- (mean(mixed[mixed$presence=="yes",]$airq) -
mean(mixed[mixed$presence=="no",]$airq))}
{hist(random, main="Null Distribution", xlab="Difference in Airquality");
abline(v = 0.2849134, col="red"); abline(v = -0.2849134, col="red")}
mean(random > 0.2849134 | random < -0.2849134)
headache2 <- headache %>% select(id, age, sex, headache) %>%
group_by(id) %>% mutate(prop_head=mean(headache=="yes")) %>%
select(-headache) %>% distinct()
headache2$age_c <- headache2$age - mean(headache2$age)
fit1 <- lm(prop_head~age_c+sex+age_c*sex, data=headache2)
summary(fit1)
ggplot(fit1, aes(age_c, prop_head, color=sex)) + geom_point() +
geom_smooth(method='lm', se=F) +
ggtitle("Proportion of Headache Days by Age and Sex")
ggplot(headache2, aes(age_c, prop_head)) + geom_point() +
ggtitle("Proportion of Headache Days by Age")
resids <- fit1$residuals
shapiro.test(resids)
fitvals <- fit1$fitted.values
ggplot() + geom_point(aes(fitvals, resids)) + geom_hline(yintercept=0)
library(sandwich)
library(lmtest)
coeftest(fit1, vcov=vcovHC(fit1))
headache2 <- headache2 %>% ungroup() %>% select(-id)
set.seed(1234)
samp_dist <- replicate(5000, {
boot <- sample_frac(headache2, replace=T)
fit2 <- lm(prop_head~age_c*sex, data=boot)
coef(fit2)
})
samp_dist %>% t %>% as.data.frame %>% summarize_all(sd)
headache4 <- headache %>% mutate(headache_occur=ifelse(headache=="yes",1,0)) %>%
select(headache_occur, time, medication)
headache$medication <- factor(medication, ordered = FALSE )
headache$medication <- factor(headache, ordered = FALSE )
headache <- factor(headache, ordered = FALSE )
headache4 <- headache %>% mutate(headache_occur=ifelse(headache=="yes",1,0)) %>%
select(headache_occur, time, medication)
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
class_diag <- function(probs,truth){
#CONFUSION MATRIX: CALCULATE ACCURACY, TPR, TNR, PPV
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
headache <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/carData/KosteckiDillon.csv")
headache <- headache %>% select(-X)
head(headache)
ggplot(headache, aes(x = age, y = airq)) +
geom_point(alpha=.5) + geom_density_2d(h=2) +
coord_fixed() + facet_wrap(~hatype)
covariance <- headache %>% group_by(hatype) %>% do(covs=cov(.[5:6]))
for(i in 1:3){print(as.character(covariance$hatype[i]))
print(covariance$covs[i])}
man <- manova(cbind(age, airq) ~ hatype, data=headache)
summary(man)
summary.aov(man)
headache %>% group_by(hatype) %>% summarize(mean(age), mean(airq))
pairwise.t.test(headache$airq, headache$hatype, p.adj="none")
pairwise.t.test(headache$age, headache$hatype, p.adj="none")
#P(type l error):
1-((.95)^9)
#Bonferroni corrected alpha:
.05/9
real <- (mean(headache[headache$headache=="yes",]$airq) -
mean(headache[headache$headache=="no",]$airq))
real
random <- vector()
for(i in 1:5000){
mixed <- data.frame(airq=sample(headache$airq), presence=headache$headache)
random[i] <- (mean(mixed[mixed$presence=="yes",]$airq) -
mean(mixed[mixed$presence=="no",]$airq))}
{hist(random, main="Null Distribution", xlab="Difference in Airquality");
abline(v = 0.2849134, col="red"); abline(v = -0.2849134, col="red")}
mean(random > 0.2849134 | random < -0.2849134)
headache2 <- headache %>% select(id, age, sex, headache) %>%
group_by(id) %>% mutate(prop_head=mean(headache=="yes")) %>%
select(-headache) %>% distinct()
headache2$age_c <- headache2$age - mean(headache2$age)
fit1 <- lm(prop_head~age_c+sex+age_c*sex, data=headache2)
summary(fit1)
ggplot(fit1, aes(age_c, prop_head, color=sex)) + geom_point() +
geom_smooth(method='lm', se=F) +
ggtitle("Proportion of Headache Days by Age and Sex")
ggplot(headache2, aes(age_c, prop_head)) + geom_point() +
ggtitle("Proportion of Headache Days by Age")
resids <- fit1$residuals
shapiro.test(resids)
fitvals <- fit1$fitted.values
ggplot() + geom_point(aes(fitvals, resids)) + geom_hline(yintercept=0)
library(sandwich)
library(lmtest)
coeftest(fit1, vcov=vcovHC(fit1))
headache2 <- headache2 %>% ungroup() %>% select(-id)
set.seed(1234)
samp_dist <- replicate(5000, {
boot <- sample_frac(headache2, replace=T)
fit2 <- lm(prop_head~age_c*sex, data=boot)
coef(fit2)
})
samp_dist %>% t %>% as.data.frame %>% summarize_all(sd)
headache4 <- headache %>% mutate(headache_occur=ifelse(headache=="yes",1,0)) %>%
select(headache_occur, time, medication)
headache <- factor(headache, ordered = FALSE )
headache4$medication <- relevel(headache4$medication, ref="none")
fit3 <- glm(headache_occur~time+medication, data=headache4, family="binomial")
coeftest(fit3)
coeftest(fit3) %>% exp
View(headache4)
install.packages("plotROC")
install.packages("glmnet")
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)
class_diag <- function(probs,truth){
#CONFUSION MATRIX: CALCULATE ACCURACY, TPR, TNR, PPV
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
#CALCULATE EXACT AUC
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
headache <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/carData/KosteckiDillon.csv")
headache <- headache %>% select(-X)
head(headache)
ggplot(headache, aes(x = age, y = airq)) +
geom_point(alpha=.5) + geom_density_2d(h=2) +
coord_fixed() + facet_wrap(~hatype)
covariance <- headache %>% group_by(hatype) %>% do(covs=cov(.[5:6]))
for(i in 1:3){print(as.character(covariance$hatype[i]))
print(covariance$covs[i])}
man <- manova(cbind(age, airq) ~ hatype, data=headache)
summary(man)
summary.aov(man)
headache %>% group_by(hatype) %>% summarize(mean(age), mean(airq))
pairwise.t.test(headache$airq, headache$hatype, p.adj="none")
pairwise.t.test(headache$age, headache$hatype, p.adj="none")
#P(type l error):
1-((.95)^9)
#Bonferroni corrected alpha:
.05/9
real <- (mean(headache[headache$headache=="yes",]$airq) -
mean(headache[headache$headache=="no",]$airq))
real
random <- vector()
for(i in 1:5000){
mixed <- data.frame(airq=sample(headache$airq), presence=headache$headache)
random[i] <- (mean(mixed[mixed$presence=="yes",]$airq) -
mean(mixed[mixed$presence=="no",]$airq))}
{hist(random, main="Null Distribution", xlab="Difference in Airquality");
abline(v = 0.2849134, col="red"); abline(v = -0.2849134, col="red")}
mean(random > 0.2849134 | random < -0.2849134)
headache2 <- headache %>% select(id, age, sex, headache) %>%
group_by(id) %>% mutate(prop_head=mean(headache=="yes")) %>%
select(-headache) %>% distinct()
headache2$age_c <- headache2$age - mean(headache2$age)
fit1 <- lm(prop_head~age_c+sex+age_c*sex, data=headache2)
summary(fit1)
ggplot(fit1, aes(age_c, prop_head, color=sex)) + geom_point() +
geom_smooth(method='lm', se=F) +
ggtitle("Proportion of Headache Days by Age and Sex")
ggplot(headache2, aes(age_c, prop_head)) + geom_point() +
ggtitle("Proportion of Headache Days by Age")
resids <- fit1$residuals
shapiro.test(resids)
fitvals <- fit1$fitted.values
ggplot() + geom_point(aes(fitvals, resids)) + geom_hline(yintercept=0)
library(sandwich)
library(lmtest)
coeftest(fit1, vcov=vcovHC(fit1))
headache2 <- headache2 %>% ungroup() %>% select(-id)
set.seed(1234)
samp_dist <- replicate(5000, {
boot <- sample_frac(headache2, replace=T)
fit2 <- lm(prop_head~age_c*sex, data=boot)
coef(fit2)
})
samp_dist %>% t %>% as.data.frame %>% summarize_all(sd)
headache4 <- headache %>% mutate(headache_occur=ifelse(headache=="yes",1,0)) %>%
select(headache_occur, time, medication)
headache4$medication <- factor(headache4$medication, ordered = FALSE )
headache4$medication <- relevel(headache4$medication, ref="none")
fit3 <- glm(headache_occur~time+medication, data=headache4, family="binomial")
coeftest(fit3)
coeftest(fit3) %>% exp
prob <- predict(fit3, type = "response")
pred <- ifelse(prob > 0.5, 1, 0)
table(prediction = pred, truth = headache4$headache_occur) %>% addmargins
#accuracy:
(440+2323)/4152
#sensitivity(TPR):
(2323)/2666
#specificity(TNR):
(440)/1486
#Recall(PPV):
(2323)/3369
headache4$logit <- predict(fit3, type="link")
headache4 %>% ggplot(aes(logit, fill=factor(headache_occur))) +
geom_density(alpha=.3) + geom_vline(xintercept=0, color='red') +
labs(fill="headache")
library(plotROC)
headache4$prob<-predict(fit3,type="response")
ROC <- ggplot(headache4) + geom_roc(aes(d=headache_occur, m=prob), n.cuts=0)
ROC
calc_auc(ROC)
set.seed(1234)
k=10
data <- headache4[sample(nrow(headache4)),]
fold <- cut(seq(1:nrow(headache4)), breaks=k, labels=F)
val <- NULL
for(i in 1:k){
trainset <- data[fold!=i,]
testset <- data[fold==i,]
truth <- testset$headache_occur
fit4 <- glm(headache_occur~medication+time, data=trainset, family="binomial")
prob <- predict(fit4, newdata=testset, type="response")
val <- rbind(val, class_diag(prob, truth))
}
summarize_all(val, mean)
library(glmnet)
headache5 <- headache %>% select(-id) %>% filter(hatype!="Mixed")
y <- as.matrix(headache5$hatype)
x <- model.matrix(hatype~., data=headache5)[,-1]
head(x)
x <- scale(x)
cv <- cv.glmnet(x, y, family = "binomial")
lasso <- glmnet(x, y, family = "binomial", lambda = cv$lambda.1se)
coef(lasso)
View(headache5)
headache6 <- headache5 %>% select(-time)
set.seed(1234)
k=10
data2 <- headache6 %>% sample_frac
folds2 <- ntile(1:nrow(data2), n=10)
val2 <- NULL
for(i in 1:k){
trainset2 <- data2[folds2!=i,]
testset2 <- data2[folds2==i,]
truth2 <- testset2$hatype
fit5 <- glm(hatype~., data=trainset2, family="binomial")
prob2 <- predict(fit5, newdata=testset2, type="response")
val2 <- rbind(val2, class_diag(prob2, truth2))
}
val2 %>% summarize_all(mean)
View(data2)
View(headache4)
View(headache2)
View(headache)
View(headache4)
View(headache5)
View(headache6)
headache6 <- headache5 %>% select(-time) %>% mutate(hatype=ifelse(Aura=="yes",1,0))
View(headache5)
View(headache5)
View(headache5)
headache6 <- headache5 %>% select(-time) %>% mutate(hatype=ifelse(hatype=="Aura",1,0))
set.seed(1234)
k=10
data2 <- headache6 %>% sample_frac
folds2 <- ntile(1:nrow(data2), n=10)
val2 <- NULL
for(i in 1:k){
trainset2 <- data2[folds2!=i,]
testset2 <- data2[folds2==i,]
truth2 <- testset2$hatype
fit5 <- glm(hatype~., data=trainset2, family="binomial")
prob2 <- predict(fit5, newdata=testset2, type="response")
val2 <- rbind(val2, class_diag(prob2, truth2))
}
val2 %>% summarize_all(mean)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
git -- version
getwd()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
git init
cd ~/Desktop/PROJECT_DIRECTORY_NAME #if you haven't already
git init #initialize local git respository
git add . #add all files in repository to be uploaded
git commit -m "first website commit"
git remote add origin https://github.com/USERNAME/WEBSITE_REPOSITORY.git #re
git push origin master
blogdown::serve_site()
git init
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
getwd()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
install.packages("rmarkdown")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("rmarkdown")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(reticulate)
install.packages("reticulate")
library(reticulate)
py$x
install.packages("reticulate")
library(reticulate)
py$x
py$x
py$x
x+5
y = py$x
y+5
py$x
reticulate::use_python("/path/to/desired_python")
py$x
py$x
reticulate::use_python("/path/to/desired_python")
py$x
reticulate::use_condaenv()
py$x
reticulate::use_condaenv()
py$x
